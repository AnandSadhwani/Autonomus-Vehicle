import argparse
import logging
import random
import cv2
import numpy as np
from metadrive import MetaDriveEnv
from metadrive.component.sensors.rgb_camera import RGBCamera
from metadrive.constants import HELP_MESSAGE

def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("--observation", type=str, default="lidar", choices=["lidar", "rgb_camera"])
    return parser.parse_args()

def get_config(args):
    config = {
        "use_render": True,
        "manual_control": True,
        "traffic_density": 0.1,
        "num_scenarios": 10000,
        "random_agent_model": False,
        "random_lane_width": True,
        "random_lane_num": True,
        "on_continuous_line_done": False,
        "out_of_route_done": True,
        "vehicle_config": {"show_lidar": True, "show_navi_mark": False, "show_line_to_navi_mark": False},
        "map": 4,
        "start_seed": 10,
    }
    
    if args.observation == "rgb_camera":
        config.update({
            "image_observation": True,
            "sensors": {"rgb_camera": (RGBCamera, 400, 300)},
            "interface_panel": ["rgb_camera", "dashboard"]
        })
    
    return config

def main():
    args = parse_arguments()
    config = get_config(args)
    
    env = MetaDriveEnv(config)
    try:
        o, _ = env.reset(seed=21)
        print(HELP_MESSAGE)
        env.agent.expert_takeover = True
        
        if args.observation == "rgb_camera":
            assert isinstance(o, dict)
            print("The observation is a dict with numpy arrays as values:", {k: v.shape for k, v in o.items()})
        else:
            assert isinstance(o, np.ndarray)
            print("The observation is a numpy array with shape:", o.shape)
        
        for i in range(1, 1000000000):
            o, r, tm, tc, info = env.step([0, 0])
            env.render(
                text={
                    "Auto-Drive (Switch mode: T)": "on" if env.current_track_agent.expert_takeover else "off",
                    "Current Observation": args.observation,
                    "Keyboard Control": "W,A,S,D",
                }
            )
            print("Navigation information:", info["navigation_command"])

            if args.observation == "rgb_camera":
                cv2.imshow('RGB Image in Observation', o["image"][..., -1])
                cv2.waitKey(1)
            
            if (tm or tc) and info["arrive_dest"]:
                env.reset(env.current_seed + 1)
                env.current_track_agent.expert_takeover = True
    except Exception as e:
        logging.error("An error occurred: %s", e)
    finally:
        env.close()

if __name__ == "__main__":
    main()
